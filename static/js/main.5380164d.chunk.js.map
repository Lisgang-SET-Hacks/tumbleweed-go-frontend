{"version":3,"sources":["OLMap.js","Info.js","util/funcs.js","App.js","index.js"],"names":["OLMap","props","getData","cb","axios","get","then","res","status","data","result","console","log","catch","err","setAllTumbleweedLayers","tumbleweedLayers","i","sliderRange","push","setSingleTumbleweedLayer","setState","currentTumbleweedLayer","index","currentTumbleweedStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","pastTumbleweedStyle","pathStyle","features","map","point","longitude","latitude","style","location","_lat","_long","predictedLocations","length","feature","Feature","geometry","Point","fromLonLat","setStyle","j","forEach","lat1","lon1","lat2","lon2","LineString","VectorLayer","source","VectorSource","initMap","mapLayer","TileLayer","className","BingMaps","key","imagerySet","popupOverlay","Overlay","element","popupRef","current","positioning","stopEvent","offset","Map","layers","state","overlays","target","mapRef","view","View","center","zoom","minZoom","maxZoom","on","e","getFeaturesAtPixel","pixel","showPopup","hidePopup","popup","coordRaw","getGeometry","getCoordinates","coordLonLat","transform","innerHTML","toFixed","display","setPosition","showTumbleweedLayer","removeLayer","addLayer","React","createRef","this","prevProps","prevState","day","ref","Component","Info","Divider","Date","toLocaleDateString","toLocaleTimeString","paddingBottom","src","alt","formatDateAsString","date","dateInfo","toDateString","split","App","sliderMarks","setSliderMarks","value","label","now","Container","marginTop","Slider","onChange","val","min","max","marks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5380164d.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Map, Feature, View, Overlay } from 'ol';\r\nimport { fromLonLat, transform } from 'ol/proj';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource, BingMaps } from 'ol/source';\r\nimport { Circle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport 'ol/ol.css';\r\n\r\nclass OLMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tumbleweedLayers: [],\r\n      currentTumbleweedLayer: null\r\n    }\r\n    this.map = null;\r\n    this.mapRef = React.createRef();\r\n    this.popupRef = React.createRef();\r\n  }\r\n\r\n  getData = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/get';\r\n    axios.get(url).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.data.result);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  setAllTumbleweedLayers = (data) => {\r\n    let tumbleweedLayers = [];\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      tumbleweedLayers.push(this.setSingleTumbleweedLayer(data, i - 1));\r\n    }\r\n    this.setState({\r\n      tumbleweedLayers: tumbleweedLayers,\r\n      currentTumbleweedLayer: tumbleweedLayers[0]  // Set starting tumbleweed layer.\r\n    });\r\n  }\r\n\r\n  setSingleTumbleweedLayer = (data, index) => {\r\n\r\n    let currentTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 7,\r\n        fill: new Fill({ color: '#e3af2b' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pastTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 7,\r\n        fill: new Fill({ color: '#e2cf9e' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pathStyle = new Style({\r\n      stroke: new Stroke({ color: '#664e13', width: 4 })\r\n    });\r\n\r\n    // Draw tumbleweed points.\r\n\r\n    let features = data.map((point, i) => {\r\n\r\n      let style = currentTumbleweedStyle;\r\n\r\n      let longitude, latitude;\r\n      if (index === -1) {\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n      }\r\n      else if (point.predictedLocations.length === 0) {\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n      else if (index < point.predictedLocations.length) {\r\n        latitude = point.predictedLocations[index]._lat;\r\n        longitude = point.predictedLocations[index]._long;\r\n      }\r\n      else {\r\n        latitude = point.predictedLocations[point.predictedLocations.length - 1]._lat;\r\n        longitude = point.predictedLocations[point.predictedLocations.length - 1]._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n\r\n      let feature = new Feature({\r\n        geometry: new Point(fromLonLat([\r\n          longitude, latitude\r\n        ]))\r\n      });\r\n      feature.setStyle(style);\r\n      return feature;\r\n    });\r\n\r\n    // Draw predition lines.\r\n\r\n    if (index !== -1) {\r\n      // Loop day by day.\r\n      for (let j = 0; j <= index; j++){\r\n        // Loop through tumbleweeds.\r\n        data.forEach(point => {\r\n          // Only draw prediction lines if predictions extend far enough.\r\n          if (j < point.predictedLocations.length) {\r\n            let lat1 = j === 0 ? point.location._lat : point.predictedLocations[j - 1]._lat;\r\n            let lon1 = j === 0 ? point.location._long : point.predictedLocations[j - 1]._long;\r\n            let lat2 = point.predictedLocations[j]._lat;\r\n            let lon2 = point.predictedLocations[j]._long;\r\n\r\n            let feature = new Feature({\r\n              geometry: new LineString([\r\n                fromLonLat([ lon1, lat1 ]),\r\n                fromLonLat([ lon2, lat2 ])\r\n              ])\r\n            });\r\n            feature.setStyle(pathStyle);\r\n            features.push(feature);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n  }\r\n\r\n  initMap = () => {\r\n\r\n    let mapLayer = new TileLayer({\r\n      className: 'map__bingMaps',\r\n      source: new BingMaps({\r\n        key: 'AtMr0RAC0iKdKPPPsGSPqIFCxjk7XpR9rq99IQR5vDBoax8u1KuYvOinwtsiQcFI',\r\n        imagerySet: 'AerialWithLabelsOnDemand'\r\n      })\r\n    });\r\n\r\n    let popupOverlay = new Overlay({\r\n      element: this.popupRef.current,\r\n      positioning: 'bottom-center',\r\n      stopEvent: false,\r\n      offset: [ 0, -16 ]\r\n    });\r\n    \r\n    this.map = new Map({\r\n      layers: [ mapLayer, this.state.currentTumbleweedLayer ],\r\n      overlays: [ popupOverlay ],\r\n      target: this.mapRef.current,\r\n      view: new View({\r\n        center: fromLonLat([ -97, 42 ]),\r\n        zoom: 5,\r\n        minZoom: 5,\r\n        maxZoom: 15\r\n      })\r\n    });\r\n\r\n    this.map.on('click', e => {\r\n      let feature = this.map.getFeaturesAtPixel(e.pixel)[0];\r\n      if (feature) {\r\n        this.showPopup(feature, popupOverlay);\r\n      }\r\n      else {\r\n        this.hidePopup();\r\n      }\r\n    });\r\n  }\r\n\r\n  showPopup = (feature, popup) => {\r\n    let coordRaw = feature.getGeometry().getCoordinates();\r\n    let coordLonLat = transform(coordRaw, 'EPSG:3857', 'EPSG:4326');\r\n    \r\n    this.popupRef.current.innerHTML = `${coordLonLat[1].toFixed(5)}, ${coordLonLat[0].toFixed(5)}`;\r\n    this.popupRef.current.style.display = 'block';\r\n    popup.setPosition(coordRaw);\r\n  }\r\n\r\n  hidePopup = () => {\r\n    this.popupRef.current.style.display = 'none';\r\n  }\r\n\r\n  showTumbleweedLayer = (index) => {\r\n    this.map.removeLayer(this.state.currentTumbleweedLayer);\r\n    this.map.addLayer(this.state.tumbleweedLayers[index]);\r\n    this.setState({\r\n      currentTumbleweedLayer: this.state.tumbleweedLayers[index]\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getData(data => {\r\n      this.setAllTumbleweedLayers(data);\r\n      this.initMap();\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.day !== this.props.day) {\r\n      this.showTumbleweedLayer(this.props.day);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div ref={this.mapRef} className='map'>\r\n        <div ref={this.popupRef} className='map__popup' style={{display: 'none'}} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default OLMap;\r\n","import React from 'react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\nclass Info extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h2>Tumbleweed Info</h2>\r\n        <Divider />\r\n        <h4>Current position (est.)</h4>\r\n        <p>(46, -110)</p>\r\n        <Divider />\r\n        <h4>Initial sighting time</h4>\r\n        <p>\r\n          {(new Date()).toLocaleDateString()}\r\n          <br />\r\n          {(new Date()).toLocaleTimeString()}\r\n        </p>\r\n        <h4>Initial sighting position</h4>\r\n        <p>(46, -110)</p>\r\n        <h4>Initial sighting image</h4>\r\n        <div className='aspect-ratio' style={{paddingBottom: '75%'}}>\r\n          <div>\r\n            <img src='https://picsum.photos/400' alt='Initial sighting' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","const formatDateAsString = (date) => {\r\n\r\n  let dateInfo = date.toDateString().split(' ');\r\n\r\n  return dateInfo[0] + ' ' + dateInfo[2];  // Take day and date.\r\n}\r\n\r\nexport { formatDateAsString };\r\n","import React from 'react';\r\nimport { Container, Slider } from '@material-ui/core';\r\nimport OLMap from './OLMap';\r\nimport Info from './Info';\r\n\r\nimport { formatDateAsString } from './util/funcs';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    day: 0,\r\n    sliderMarks: [],\r\n    sliderRange: 8  // 7 days in advance\r\n  };\r\n\r\n  setSliderMarks = () => {\r\n\r\n    let sliderMarks = [\r\n      { value: 0, label: <b>Today</b> },\r\n      { value: 1, label: 'Tomorrow' }\r\n    ];\r\n    \r\n    let millisToDay = 1000 * 60 * 60 * 24;\r\n    for (let i = 2; i < this.state.sliderRange; i++) {\r\n      let date = new Date(Date.now() + millisToDay * i);\r\n      sliderMarks.push({\r\n        value: i,\r\n        label: formatDateAsString(date)\r\n      });\r\n    }\r\n\r\n    this.setState({ sliderMarks: sliderMarks });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setSliderMarks();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='map__wrapper'>\r\n          <OLMap day={this.state.day} sliderRange={this.state.sliderRange} />\r\n        </div>\r\n        <Container className='info'>\r\n          <Info />\r\n        </Container>\r\n        <div className='timeline'>\r\n          <h4 style={{ marginTop: 0 }}>Movement predictions (USA only)</h4>\r\n          <Slider\r\n            className='timeline__slider'\r\n            onChange={ (e, val) => this.setState({ day: val }) }\r\n            min={0}\r\n            max={this.state.sliderRange - 1}\r\n            marks={this.state.sliderMarks}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}