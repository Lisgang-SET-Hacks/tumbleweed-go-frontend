{"version":3,"sources":["util/funcs.js","OLMap.js","Info.js","App.js","index.js"],"names":["formatDateAsString","date","dateInfo","toDateString","split","formatAsCoordinate","latitude","longitude","decimals","dir1","dir2","toFixed","OLMap","props","initWithData","data","tumbleweedLayers","tumbleweedTrailLayers","i","sliderRange","push","setTumbleweedLayer","setTumbleweedTrailLayer","setState","currentTumbleweedLayer","currentTumbleweedTrailLayer","initMap","index","currentTumbleweedStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","pastTumbleweedStyle","features","map","point","id","style","location","_latitude","_longitude","predictedLocations","length","n","feature","Feature","geometry","Point","fromLonLat","setId","setStyle","layer","VectorLayer","source","VectorSource","set","trailStyle","j","forEach","lat1","lon1","lat2","lon2","LineString","mapLayer","TileLayer","className","BingMaps","key","imagerySet","popupOverlay","Overlay","element","popupRef","current","positioning","stopEvent","offset","Map","layers","state","overlays","target","mapRef","view","View","center","zoom","minZoom","maxZoom","on","e","deselectTumbleweed","hidePopup","forEachFeatureAtPixel","pixel","get","selectTumbleweed","showPopup","getTarget","cursor","String","getId","splice","tumbleweedId","predictedLocationId","undefined","updateSelectedTumbleweedDataFunc","coordRaw","getGeometry","getCoordinates","coordLonLat","transform","innerHTML","display","setPosition","refreshPopup","selectedTumbleweedIndex","getSource","getFeatures","showTumbleweedLayer","callback","removeLayer","addLayer","React","createRef","prevProps","prevState","this","day","ref","Component","Info","renderInfo","predictionIndex","currentLocation","Math","min","dangerouslySetInnerHTML","__html","Divider","Date","uploadTime","toLocaleDateString","toLocaleTimeString","uploadLocation","paddingBottom","src","alt","App","sliderMarks","tumbleweedData","selectedTumbleweedData","tumbleweedIndex","getData","cb","axios","then","res","status","result","console","log","catch","err","getSelectedTumbleweedData","onTimelineChange","val","updateSelectedTumbleweedData","setSliderMarks","value","label","now","Container","marginTop","Slider","onChange","max","marks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeda5607.chunk.js","sourcesContent":["const formatDateAsString = (date) => {\r\n  let dateInfo = date.toDateString().split(' ');\r\n  return dateInfo[0] + ' ' + dateInfo[2];  // Take day and date.\r\n}\r\n\r\nconst formatAsCoordinate = (latitude, longitude, decimals = 5) => {\r\n  let dir1 = latitude < 0 ? 'S' : 'N';\r\n  let dir2 = longitude < 0 ? 'W' : 'E';\r\n  return `${latitude.toFixed(decimals)}&#xb0;${dir1}, ${longitude.toFixed(decimals)}&#xb0;${dir2}`;\r\n}\r\n\r\nexport { formatDateAsString, formatAsCoordinate };\r\n","import React from 'react';\r\n\r\nimport { Map, Feature, View, Overlay } from 'ol';\r\nimport { fromLonLat, transform } from 'ol/proj';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource, BingMaps } from 'ol/source';\r\nimport { Circle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nimport 'ol/ol.css';\r\n\r\nclass OLMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tumbleweedLayers: [],\r\n      currentTumbleweedLayer: null,\r\n      tumbleweedTrailLayers: [],\r\n      currentTumbleweedTrailLayer: null\r\n    }\r\n    this.map = null;\r\n    this.popupOverlay = null;\r\n    this.mapRef = React.createRef();\r\n    this.popupRef = React.createRef();\r\n  }\r\n\r\n  initWithData = (data) => {\r\n    let tumbleweedLayers = [];\r\n    let tumbleweedTrailLayers = [];\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      tumbleweedLayers.push(this.setTumbleweedLayer(data, i - 1));\r\n      tumbleweedTrailLayers.push(this.setTumbleweedTrailLayer(data, i - 1));\r\n    }\r\n    this.setState({\r\n      tumbleweedLayers: tumbleweedLayers,\r\n      currentTumbleweedLayer: tumbleweedLayers[0],\r\n      tumbleweedTrailLayers: tumbleweedTrailLayers,\r\n      currentTumbleweedTrailLayer: tumbleweedTrailLayers[0]\r\n    }, () => {\r\n      this.initMap();\r\n    });\r\n  }\r\n\r\n  setTumbleweedLayer = (data, index) => {\r\n\r\n    let currentTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e3af2b' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pastTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e2cf9e' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    // Draw tumbleweeds.\r\n\r\n    let features = data.map((point, i) => {\r\n\r\n      let style = currentTumbleweedStyle;\r\n\r\n      let id, longitude, latitude;\r\n      \r\n      if (index === -1) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._latitude;\r\n        longitude = point.location._longitude;\r\n      }\r\n      else if (point.predictedLocations.length === 0) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._latitude;\r\n        longitude = point.location._longitude;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n      else if (index < point.predictedLocations.length) {\r\n        id = `tumbleweed_${i}_${index}`;\r\n        latitude = point.predictedLocations[index]._latitude;\r\n        longitude = point.predictedLocations[index]._longitude;\r\n      }\r\n      else {\r\n        let n = point.predictedLocations.length - 1;\r\n        id = `tumbleweed_${i}_${n}`;\r\n        latitude = point.predictedLocations[n]._latitude;\r\n        longitude = point.predictedLocations[n]._longitude;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n\r\n      let feature = new Feature({\r\n        geometry: new Point(fromLonLat([\r\n          longitude, latitude\r\n        ]))\r\n      });\r\n      feature.setId(id);\r\n      feature.setStyle(style);\r\n      return feature;\r\n    });\r\n\r\n    let layer = new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n    layer.set('name', 'tumbleweeds');\r\n    return layer;\r\n  }\r\n\r\n  setTumbleweedTrailLayer = (data, index) => {\r\n\r\n    let trailStyle = new Style({\r\n      stroke: new Stroke({ color: '#664e13', width: 4 })\r\n    });\r\n\r\n    // Draw trail.\r\n\r\n    let features = [];\r\n\r\n    if (index !== -1) {\r\n      // Loop day by day.\r\n      for (let j = 0; j <= index; j++){\r\n        // Loop through tumbleweeds.\r\n        data.forEach(point => {\r\n          // Only draw prediction lines if predictions extend far enough.\r\n          if (j < point.predictedLocations.length) {\r\n            let lat1 = j === 0 ? point.location._latitude : point.predictedLocations[j - 1]._latitude;\r\n            let lon1 = j === 0 ? point.location._longitude : point.predictedLocations[j - 1]._longitude;\r\n            let lat2 = point.predictedLocations[j]._latitude;\r\n            let lon2 = point.predictedLocations[j]._longitude;\r\n\r\n            let feature = new Feature({\r\n              geometry: new LineString([\r\n                fromLonLat([ lon1, lat1 ]),\r\n                fromLonLat([ lon2, lat2 ])\r\n              ])\r\n            });\r\n            feature.setStyle(trailStyle);\r\n            features.push(feature);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    let layer = new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n    layer.set('name', 'tumbleweedTrails');\r\n    return layer;\r\n  }\r\n\r\n  initMap = () => {\r\n\r\n    let mapLayer = new TileLayer({\r\n      className: 'map__bingMaps',\r\n      source: new BingMaps({\r\n        key: 'AtMr0RAC0iKdKPPPsGSPqIFCxjk7XpR9rq99IQR5vDBoax8u1KuYvOinwtsiQcFI',\r\n        imagerySet: 'AerialWithLabelsOnDemand'\r\n      })\r\n    });\r\n\r\n    this.popupOverlay = new Overlay({\r\n      element: this.popupRef.current,\r\n      positioning: 'bottom-center',\r\n      stopEvent: false,\r\n      offset: [ 0, -16 ]\r\n    });\r\n    \r\n    this.map = new Map({\r\n      layers: [ mapLayer, this.state.currentTumbleweedTrailLayer, this.state.currentTumbleweedLayer ],\r\n      overlays: [ this.popupOverlay ],\r\n      target: this.mapRef.current,\r\n      view: new View({\r\n        center: fromLonLat([ -97, 42 ]),\r\n        zoom: 5,\r\n        minZoom: 5,\r\n        maxZoom: 15\r\n      })\r\n    });\r\n\r\n    this.map.on('click', e => {\r\n      // Default to no selection.\r\n      this.deselectTumbleweed();\r\n      this.hidePopup();\r\n      // Select if applicable.\r\n      this.map.forEachFeatureAtPixel(e.pixel, (feature, layer) => {\r\n        if (layer.get('name') === 'tumbleweeds') {\r\n          this.selectTumbleweed(feature);\r\n          this.showPopup(feature);\r\n          return true;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.map.on('pointermove', e => {\r\n      // Default to no selection.\r\n      this.map.getTarget().style.cursor = '';\r\n      // Select if applicable.\r\n      this.map.forEachFeatureAtPixel(e.pixel, (feature, layer) => {\r\n        if (layer.get('name') === 'tumbleweeds') {\r\n          this.map.getTarget().style.cursor = 'pointer';\r\n          return true;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  selectTumbleweed = (feature) => {\r\n    let [ tumbleweedId, predictedLocationId ] = String(feature.getId()).split('_').splice(1);  // Ignore the first element.\r\n    if (predictedLocationId !== undefined) {\r\n      this.props.updateSelectedTumbleweedDataFunc(tumbleweedId, predictedLocationId);\r\n    }\r\n    else {\r\n      this.props.updateSelectedTumbleweedDataFunc(tumbleweedId, -1);\r\n    }\r\n  }\r\n\r\n  deselectTumbleweed = () => {\r\n    this.props.updateSelectedTumbleweedDataFunc(-1, -1);\r\n  }\r\n\r\n  showPopup = (feature) => {\r\n    let coordRaw = feature.getGeometry().getCoordinates();\r\n    let coordLonLat = transform(coordRaw, 'EPSG:3857', 'EPSG:4326');\r\n    \r\n    this.popupRef.current.innerHTML = formatAsCoordinate(coordLonLat[1], coordLonLat[0], 3);\r\n    this.popupRef.current.style.display = 'block';\r\n    this.popupOverlay.setPosition(coordRaw);\r\n  }\r\n\r\n  hidePopup = () => {\r\n    this.popupRef.current.style.display = 'none';\r\n  }\r\n\r\n  refreshPopup = () => {\r\n    if (this.props.selectedTumbleweedIndex !== -1) {\r\n      let features = this.state.currentTumbleweedLayer.getSource().getFeatures();\r\n      this.showPopup(features[this.props.selectedTumbleweedIndex]);\r\n    }\r\n  }\r\n\r\n  showTumbleweedLayer = (index, callback = (() => {})) => {\r\n    this.map.removeLayer(this.state.currentTumbleweedTrailLayer);\r\n    this.map.removeLayer(this.state.currentTumbleweedLayer);\r\n    this.map.addLayer(this.state.tumbleweedTrailLayers[index]);\r\n    this.map.addLayer(this.state.tumbleweedLayers[index]);\r\n    this.setState({\r\n      currentTumbleweedLayer: this.state.tumbleweedLayers[index],\r\n      currentTumbleweedTrailLayer: this.state.tumbleweedTrailLayers[index]\r\n    }, () => callback());\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.data !== this.props.data) {\r\n      this.initWithData(this.props.data);\r\n    }\r\n    if (prevProps.day !== this.props.day) {\r\n      this.showTumbleweedLayer(this.props.day, () => {\r\n        this.refreshPopup();\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div ref={this.mapRef} className='map'>\r\n        <div ref={this.popupRef} className='map__popup' style={{display: 'none'}} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default OLMap;\r\n","import React from 'react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nclass Info extends React.Component {\r\n\r\n  renderInfo = ()  => {\r\n\r\n    let { data, predictionIndex } = this.props;\r\n\r\n    if (!data) {\r\n      return <p>No tumbleweed selected.</p>;\r\n    }\r\n\r\n    let currentLocation = data.location;\r\n    if (data.predictedLocations.length > 0) {\r\n      if (predictionIndex !== -1) {\r\n        let index = Math.min(predictionIndex, data.predictedLocations.length - 1);\r\n        currentLocation = data.predictedLocations[index];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h4>Current position (est.)</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(currentLocation._latitude, currentLocation._longitude)\r\n        }} />\r\n        <Divider />\r\n        <h4>Initial sighting time</h4>\r\n        <p>\r\n          {(new Date(data.uploadTime)).toLocaleDateString()}\r\n          <br />\r\n          {(new Date(data.uploadTime)).toLocaleTimeString()}\r\n        </p>\r\n        <h4>Initial sighting position</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(data.uploadLocation._latitude, data.uploadLocation._longitude)\r\n        }} />\r\n        <h4>Initial sighting image</h4>\r\n        <div className='aspect-ratio' style={{paddingBottom: '75%'}}>\r\n          <div>\r\n            <img src='https://picsum.photos/400' alt='Initial sighting' />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h2>Tumbleweed Info</h2>\r\n        <Divider />\r\n        {this.renderInfo()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Slider } from '@material-ui/core';\r\nimport OLMap from './OLMap';\r\nimport Info from './Info';\r\n\r\nimport { formatDateAsString } from './util/funcs';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    day: 0,\r\n    sliderMarks: [],\r\n    sliderRange: 8,  // 7 days in advance\r\n    tumbleweedData: [],\r\n    selectedTumbleweedData: {\r\n      tumbleweedIndex: -1,\r\n      predictionIndex: -1\r\n    }\r\n  };\r\n\r\n  getData = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/get';\r\n    axios.get(url).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.data.result);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  getSelectedTumbleweedData = () => {\r\n    let index = this.state.selectedTumbleweedData.tumbleweedIndex;\r\n    return index === -1 ? null : this.state.tumbleweedData[index];\r\n  }\r\n\r\n  onTimelineChange = (e, val) => {\r\n    this.setState({ day: val });\r\n    this.updateSelectedTumbleweedData(this.state.selectedTumbleweedData.tumbleweedIndex, val - 1);\r\n  }\r\n\r\n  setSliderMarks = () => {\r\n\r\n    let sliderMarks = [\r\n      { value: 0, label: <b>Today</b> },\r\n      { value: 1, label: 'Tomorrow' }\r\n    ];\r\n    \r\n    let millisToDay = 1000 * 60 * 60 * 24;\r\n    for (let i = 2; i < this.state.sliderRange; i++) {\r\n      let date = new Date(Date.now() + millisToDay * i);\r\n      sliderMarks.push({\r\n        value: i,\r\n        label: formatDateAsString(date)\r\n      });\r\n    }\r\n\r\n    this.setState({ sliderMarks: sliderMarks });\r\n  }\r\n\r\n  updateSelectedTumbleweedData = (tumbleweedIndex, predictionIndex) => {\r\n    this.setState({\r\n      selectedTumbleweedData: {\r\n        tumbleweedIndex: tumbleweedIndex,\r\n        predictionIndex: predictionIndex\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setSliderMarks();\r\n    this.getData(data => {\r\n      this.setState({ tumbleweedData: data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='map__wrapper'>\r\n          <OLMap\r\n            data={this.state.tumbleweedData}\r\n            day={this.state.day}\r\n            sliderRange={this.state.sliderRange}\r\n            selectedTumbleweedIndex={this.state.selectedTumbleweedData.tumbleweedIndex}\r\n            updateSelectedTumbleweedDataFunc={this.updateSelectedTumbleweedData}\r\n          />\r\n        </div>\r\n        <Container className='info'>\r\n          <Info\r\n            data={this.getSelectedTumbleweedData()}\r\n            predictionIndex={this.state.selectedTumbleweedData.predictionIndex}\r\n          />\r\n        </Container>\r\n        <div className='timeline'>\r\n          <h4 style={{ marginTop: 0 }}>Movement predictions (USA only)</h4>\r\n          <Slider\r\n            className='timeline__slider'\r\n            onChange={this.onTimelineChange}\r\n            min={0}\r\n            max={this.state.sliderRange - 1}\r\n            marks={this.state.sliderMarks}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}