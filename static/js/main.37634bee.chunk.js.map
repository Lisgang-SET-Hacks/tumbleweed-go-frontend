{"version":3,"sources":["OLMap.js","App.js","index.js"],"names":["OLMap","props","getData","cb","axios","get","then","res","status","data","result","console","log","catch","err","setAllTumbleweedLayers","tumbleweedLayers","i","sliderRange","push","setSingleTumbleweedLayer","setState","currentTumbleweedLayer","index","currentTumbleweedStyle","Style","image","CircleStyle","radius","fill","Fill","color","stroke","Stroke","width","pastTumbleweedStyle","pathStyle","features","map","point","longitude","latitude","style","location","_lat","_long","predictedLocations","length","feature","Feature","geometry","Point","fromLonLat","setStyle","j","forEach","lat1","lon1","lat2","lon2","LineString","VectorLayer","source","VectorSource","initMap","mapLayer","TileLayer","className","BingMaps","key","imagerySet","Map","layers","state","target","mapRef","current","view","View","center","zoom","minZoom","maxZoom","showTumbleweedLayer","removeLayer","addLayer","React","createRef","this","prevProps","prevState","day","ref","Component","daysOfWeek","App","sliderMarks","setSliderMarks","value","label","Date","getDay","marginTop","Slider","id","onChange","e","val","min","max","marks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37634bee.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Map, Feature, View } from 'ol';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource, BingMaps } from 'ol/source';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport 'ol/ol.css';\r\n\r\nclass OLMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tumbleweedLayers: [],\r\n      currentTumbleweedLayer: null\r\n    }\r\n    this.map = null;\r\n    this.mapRef = React.createRef();\r\n  }\r\n\r\n  getData = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/get';\r\n    axios.get(url).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.data.result);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  setAllTumbleweedLayers = (data) => {\r\n    let tumbleweedLayers = [];\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      tumbleweedLayers.push(this.setSingleTumbleweedLayer(data, i - 1));\r\n    }\r\n    this.setState({\r\n      tumbleweedLayers: tumbleweedLayers,\r\n      currentTumbleweedLayer: tumbleweedLayers[0]  // Set starting tumbleweed layer.\r\n    });\r\n  }\r\n\r\n  setSingleTumbleweedLayer = (data, index) => {\r\n\r\n    let currentTumbleweedStyle = new Style({\r\n      image: new CircleStyle({\r\n        radius: 7,\r\n        fill: new Fill({ color: '#e3af2b' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pastTumbleweedStyle = new Style({\r\n      image: new CircleStyle({\r\n        radius: 7,\r\n        fill: new Fill({ color: '#e2cf9e' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pathStyle = new Style({\r\n      stroke: new Stroke({ color: '#664e13', width: 3 })\r\n    });\r\n\r\n    // Draw tumbleweed points.\r\n\r\n    let features = data.map((point, i) => {\r\n\r\n      let style = currentTumbleweedStyle;\r\n\r\n      let longitude, latitude;\r\n      if (index === -1) {\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n      }\r\n      else if (point.predictedLocations.length === 0) {\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n      else if (index < point.predictedLocations.length) {\r\n        latitude = point.predictedLocations[index]._lat;\r\n        longitude = point.predictedLocations[index]._long;\r\n      }\r\n      else {\r\n        latitude = point.predictedLocations[point.predictedLocations.length - 1]._lat;\r\n        longitude = point.predictedLocations[point.predictedLocations.length - 1]._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n\r\n      let feature = new Feature({\r\n        geometry: new Point(fromLonLat([\r\n          longitude, latitude\r\n        ]))\r\n      });\r\n      feature.setStyle(style);\r\n      return feature;\r\n    });\r\n\r\n    // Draw predition lines.\r\n\r\n    if (index !== -1) {\r\n      // Loop day by day.\r\n      for (let j = 0; j <= index; j++){\r\n        // Loop through tumbleweeds.\r\n        data.forEach(point => {\r\n          // Only draw prediction lines if predictions extend far enough.\r\n          if (j < point.predictedLocations.length) {\r\n            let lat1 = j === 0 ? point.location._lat : point.predictedLocations[j - 1]._lat;\r\n            let lon1 = j === 0 ? point.location._long : point.predictedLocations[j - 1]._long;\r\n            let lat2 = point.predictedLocations[j]._lat;\r\n            let lon2 = point.predictedLocations[j]._long;\r\n\r\n            let feature = new Feature({\r\n              geometry: new LineString([\r\n                fromLonLat([ lon1, lat1 ]),\r\n                fromLonLat([ lon2, lat2 ])\r\n              ])\r\n            });\r\n            feature.setStyle(pathStyle);\r\n            features.push(feature);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n  }\r\n\r\n  initMap = () => {\r\n\r\n    let mapLayer = new TileLayer({\r\n      className: 'bingMaps',\r\n      source: new BingMaps({\r\n        key: 'AtMr0RAC0iKdKPPPsGSPqIFCxjk7XpR9rq99IQR5vDBoax8u1KuYvOinwtsiQcFI',\r\n        imagerySet: 'AerialWithLabelsOnDemand'\r\n      })\r\n    });\r\n    \r\n    this.map = new Map({\r\n      layers: [ mapLayer, this.state.currentTumbleweedLayer ],\r\n      target: this.mapRef.current,\r\n      view: new View({\r\n        center: fromLonLat([ -110, 46 ]),\r\n        zoom: 5,\r\n        minZoom: 5,\r\n        maxZoom: 11\r\n      })\r\n    });\r\n  }\r\n\r\n  showTumbleweedLayer = (index) => {\r\n    this.map.removeLayer(this.state.currentTumbleweedLayer);\r\n    this.map.addLayer(this.state.tumbleweedLayers[index]);\r\n    this.setState({\r\n      currentTumbleweedLayer: this.state.tumbleweedLayers[index]\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getData(data => {\r\n      this.setAllTumbleweedLayers(data);\r\n      this.initMap();\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.day !== this.props.day) {\r\n      this.showTumbleweedLayer(this.props.day);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div ref={this.mapRef} className='map' />\r\n    )\r\n  }\r\n}\r\nexport default OLMap;\r\n","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport OLMap from './OLMap';\r\n\r\nimport './App.css';\r\n\r\nconst daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    day: 0,\r\n    sliderMarks: [],\r\n    sliderRange: 6\r\n  };\r\n\r\n  setSliderMarks = () => {\r\n\r\n    let sliderMarks = [\r\n      { value: 0, label: <b>Today</b> },\r\n      { value: 1, label: 'Tomorrow' }\r\n    ];\r\n\r\n    let label = new Date().getDay() + 1;\r\n    for (let i = 2; i < 7; i++){\r\n      sliderMarks.push({\r\n        value: i,\r\n        label: daysOfWeek[label % 7]\r\n      });\r\n      label++;\r\n    }\r\n\r\n    this.setState({ sliderMarks: sliderMarks });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setSliderMarks();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <OLMap day={this.state.day} sliderRange={this.state.sliderRange} />\r\n        <div className='controls'>\r\n          <h3 style={{ marginTop: 0 }}>Select day to view:</h3>\r\n          <Slider\r\n            id='slider'\r\n            className='controls__slider'\r\n            onChange={ (e, val) => this.setState({ day: val }) }\r\n            min={0}\r\n            max={this.state.sliderRange - 1}\r\n            marks={this.state.sliderMarks}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}