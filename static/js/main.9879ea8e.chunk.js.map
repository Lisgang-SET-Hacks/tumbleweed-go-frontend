{"version":3,"sources":["util/funcs.js","OLMap.js","Info.js","App.js","index.js"],"names":["formatDateAsString","date","dateInfo","toDateString","split","formatAsCoordinate","latitude","longitude","decimals","dir1","dir2","toFixed","OLMap","props","initWithData","data","tumbleweedLayers","i","sliderRange","layer","setTumbleweedLayer","push","setState","currentTumbleweedLayer","initMap","index","currentTumbleweedStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","pastTumbleweedStyle","pathStyle","features","map","point","id","style","location","_lat","_long","predictedLocations","length","n","feature","Feature","geometry","Point","fromLonLat","setId","setStyle","j","forEach","lat1","lon1","lat2","lon2","LineString","VectorLayer","source","VectorSource","mapLayer","TileLayer","className","BingMaps","key","imagerySet","popupOverlay","Overlay","element","popupRef","current","positioning","stopEvent","offset","Map","layers","state","overlays","target","mapRef","view","View","center","zoom","minZoom","maxZoom","on","e","getFeaturesAtPixel","pixel","selectTumbleweed","showPopup","deselectTumbleweed","hidePopup","getTarget","cursor","String","getId","splice","tumbleweedId","predictedLocationId","undefined","updateInfoPanelFunc","popup","coordRaw","getGeometry","getCoordinates","coordLonLat","transform","innerHTML","display","setPosition","showTumbleweedLayer","removeLayer","addLayer","React","createRef","prevProps","prevState","this","day","ref","Component","Info","renderInfo","predictionIndex","currentLocation","Math","min","dangerouslySetInnerHTML","__html","Divider","Date","uploadTime","toLocaleDateString","toLocaleTimeString","uploadLocation","paddingBottom","src","alt","App","sliderMarks","tumbleweedData","selectedTumbleweedData","tumbleweedIndex","getData","cb","axios","get","then","res","status","result","console","log","catch","err","getSelectedTumbleweedData","onTimelineChange","val","updateInfoPanel","setSliderMarks","value","label","now","Container","marginTop","Slider","onChange","max","marks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9879ea8e.chunk.js","sourcesContent":["const formatDateAsString = (date) => {\r\n  let dateInfo = date.toDateString().split(' ');\r\n  return dateInfo[0] + ' ' + dateInfo[2];  // Take day and date.\r\n}\r\n\r\nconst formatAsCoordinate = (latitude, longitude, decimals = 5) => {\r\n  let dir1 = latitude < 0 ? 'S' : 'N';\r\n  let dir2 = longitude < 0 ? 'W' : 'E';\r\n  return `${latitude.toFixed(decimals)}&#xb0;${dir1}, ${longitude.toFixed(decimals)}&#xb0;${dir2}`;\r\n}\r\n\r\nexport { formatDateAsString, formatAsCoordinate };\r\n","import React from 'react';\r\n\r\nimport { Map, Feature, View, Overlay } from 'ol';\r\nimport { fromLonLat, transform } from 'ol/proj';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource, BingMaps } from 'ol/source';\r\nimport { Circle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nimport 'ol/ol.css';\r\n\r\nclass OLMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tumbleweedLayers: [],\r\n      currentTumbleweedLayer: null\r\n    }\r\n    this.map = null;\r\n    this.mapRef = React.createRef();\r\n    this.popupRef = React.createRef();\r\n  }\r\n\r\n  initWithData = (data) => {\r\n    let tumbleweedLayers = [];\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      let layer = this.setTumbleweedLayer(data, i - 1);\r\n      tumbleweedLayers.push(layer);\r\n    }\r\n    this.setState({\r\n      tumbleweedLayers: tumbleweedLayers,\r\n      currentTumbleweedLayer: tumbleweedLayers[0]  // Set starting tumbleweed layer.\r\n    }, () => {\r\n      this.initMap();\r\n    });\r\n  }\r\n\r\n  setTumbleweedLayer = (data, index) => {\r\n\r\n    let currentTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e3af2b' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pastTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e2cf9e' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pathStyle = new Style({\r\n      stroke: new Stroke({ color: '#664e13', width: 4 })\r\n    });\r\n\r\n    // Draw tumbleweed points.\r\n\r\n    let features = data.map((point, i) => {\r\n\r\n      let style = currentTumbleweedStyle;\r\n\r\n      let longitude, latitude;\r\n      let id;\r\n      if (index === -1) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n      }\r\n      else if (point.predictedLocations.length === 0) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._lat;\r\n        longitude = point.location._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n      else if (index < point.predictedLocations.length) {\r\n        id = `tumbleweed_${i}_${index}`;\r\n        latitude = point.predictedLocations[index]._lat;\r\n        longitude = point.predictedLocations[index]._long;\r\n      }\r\n      else {\r\n        let n = point.predictedLocations.length - 1;\r\n        id = `tumbleweed_${i}_${n}`;\r\n        latitude = point.predictedLocations[n]._lat;\r\n        longitude = point.predictedLocations[n]._long;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n\r\n      let feature = new Feature({\r\n        geometry: new Point(fromLonLat([\r\n          longitude, latitude\r\n        ]))\r\n      });\r\n      feature.setId(id);\r\n      feature.setStyle(style);\r\n      return feature;\r\n    });\r\n\r\n    // Draw predition lines.\r\n\r\n    if (index !== -1) {\r\n      // Loop day by day.\r\n      for (let j = 0; j <= index; j++){\r\n        // Loop through tumbleweeds.\r\n        data.forEach(point => {\r\n          // Only draw prediction lines if predictions extend far enough.\r\n          if (j < point.predictedLocations.length) {\r\n            let lat1 = j === 0 ? point.location._lat : point.predictedLocations[j - 1]._lat;\r\n            let lon1 = j === 0 ? point.location._long : point.predictedLocations[j - 1]._long;\r\n            let lat2 = point.predictedLocations[j]._lat;\r\n            let lon2 = point.predictedLocations[j]._long;\r\n\r\n            let feature = new Feature({\r\n              geometry: new LineString([\r\n                fromLonLat([ lon1, lat1 ]),\r\n                fromLonLat([ lon2, lat2 ])\r\n              ])\r\n            });\r\n            feature.setStyle(pathStyle);\r\n            features.push(feature);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n  }\r\n\r\n  initMap = () => {\r\n\r\n    let mapLayer = new TileLayer({\r\n      className: 'map__bingMaps',\r\n      source: new BingMaps({\r\n        key: 'AtMr0RAC0iKdKPPPsGSPqIFCxjk7XpR9rq99IQR5vDBoax8u1KuYvOinwtsiQcFI',\r\n        imagerySet: 'AerialWithLabelsOnDemand'\r\n      })\r\n    });\r\n\r\n    let popupOverlay = new Overlay({\r\n      element: this.popupRef.current,\r\n      positioning: 'bottom-center',\r\n      stopEvent: false,\r\n      offset: [ 0, -16 ]\r\n    });\r\n    \r\n    this.map = new Map({\r\n      layers: [ mapLayer, this.state.currentTumbleweedLayer ],\r\n      overlays: [ popupOverlay ],\r\n      target: this.mapRef.current,\r\n      view: new View({\r\n        center: fromLonLat([ -97, 42 ]),\r\n        zoom: 5,\r\n        minZoom: 5,\r\n        maxZoom: 15\r\n      })\r\n    });\r\n\r\n    this.map.on('click', e => {\r\n      let feature = this.map.getFeaturesAtPixel(e.pixel)[0];\r\n      if (feature) {\r\n        this.selectTumbleweed(feature);\r\n        this.showPopup(feature, popupOverlay);\r\n      }\r\n      else {\r\n        this.deselectTumbleweed();\r\n        this.hidePopup();\r\n      }\r\n    });\r\n\r\n    this.map.on('pointermove', e => {\r\n      let feature = this.map.getFeaturesAtPixel(e.pixel)[0];\r\n      if (feature) {\r\n        this.map.getTarget().style.cursor = 'pointer';\r\n      }\r\n      else {\r\n        this.map.getTarget().style.cursor = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  selectTumbleweed = (feature) => {\r\n    let [ tumbleweedId, predictedLocationId ] = String(feature.getId()).split('_').splice(1);  // Ignore the first element.\r\n    if (predictedLocationId !== undefined) {\r\n      this.props.updateInfoPanelFunc(tumbleweedId, predictedLocationId);\r\n    }\r\n    else {\r\n      this.props.updateInfoPanelFunc(tumbleweedId, -1);\r\n    }\r\n  }\r\n\r\n  deselectTumbleweed = () => {\r\n    this.props.updateInfoPanelFunc(-1, -1);\r\n  }\r\n\r\n  showPopup = (feature, popup) => {\r\n    let coordRaw = feature.getGeometry().getCoordinates();\r\n    let coordLonLat = transform(coordRaw, 'EPSG:3857', 'EPSG:4326');\r\n    \r\n    this.popupRef.current.innerHTML = formatAsCoordinate(coordLonLat[1], coordLonLat[0], 3);\r\n    this.popupRef.current.style.display = 'block';\r\n    popup.setPosition(coordRaw);\r\n  }\r\n\r\n  hidePopup = () => {\r\n    this.popupRef.current.style.display = 'none';\r\n  }\r\n\r\n  showTumbleweedLayer = (index) => {\r\n    this.map.removeLayer(this.state.currentTumbleweedLayer);\r\n    this.map.addLayer(this.state.tumbleweedLayers[index]);\r\n    this.setState({\r\n      currentTumbleweedLayer: this.state.tumbleweedLayers[index]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.data !== this.props.data) {\r\n      this.initWithData(this.props.data);\r\n    }\r\n    if (prevProps.day !== this.props.day) {\r\n      this.showTumbleweedLayer(this.props.day);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div ref={this.mapRef} className='map'>\r\n        <div ref={this.popupRef} className='map__popup' style={{display: 'none'}} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default OLMap;\r\n","import React from 'react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nclass Info extends React.Component {\r\n\r\n  renderInfo = ()  => {\r\n\r\n    let { data, predictionIndex } = this.props;\r\n\r\n    if (!data) {\r\n      return <p>No tumbleweed selected.</p>;\r\n    }\r\n\r\n    let currentLocation = data.location;\r\n    if (data.predictedLocations.length > 0) {\r\n      if (predictionIndex !== -1) {\r\n        let index = Math.min(predictionIndex, data.predictedLocations.length - 1);\r\n        currentLocation = data.predictedLocations[index];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h4>Current position (est.)</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(currentLocation._lat, currentLocation._long)\r\n        }} />\r\n        <Divider />\r\n        <h4>Initial sighting time</h4>\r\n        <p>\r\n          {(new Date(data.uploadTime)).toLocaleDateString()}\r\n          <br />\r\n          {(new Date(data.uploadTime)).toLocaleTimeString()}\r\n        </p>\r\n        <h4>Initial sighting position</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(data.uploadLocation._lat, data.uploadLocation._long)\r\n        }} />\r\n        <h4>Initial sighting image</h4>\r\n        <div className='aspect-ratio' style={{paddingBottom: '75%'}}>\r\n          <div>\r\n            <img src='https://picsum.photos/400' alt='Initial sighting' />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h2>Tumbleweed Info</h2>\r\n        <Divider />\r\n        {this.renderInfo()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Slider } from '@material-ui/core';\r\nimport OLMap from './OLMap';\r\nimport Info from './Info';\r\n\r\nimport { formatDateAsString } from './util/funcs';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    day: 0,\r\n    sliderMarks: [],\r\n    sliderRange: 8,  // 7 days in advance\r\n    tumbleweedData: [],\r\n    selectedTumbleweedData: {\r\n      tumbleweedIndex: -1,\r\n      predictionIndex: -1\r\n    }\r\n  };\r\n\r\n  getData = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/get';\r\n    axios.get(url).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.data.result);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  getSelectedTumbleweedData = () => {\r\n    let index = this.state.selectedTumbleweedData.tumbleweedIndex;\r\n    return index === -1 ? null : this.state.tumbleweedData[index];\r\n  }\r\n\r\n  onTimelineChange = (e, val) => {\r\n    this.setState({ day: val });\r\n    this.updateInfoPanel(this.state.selectedTumbleweedData.tumbleweedIndex, val - 1);\r\n    // TODO: Fix popup on slider change.\r\n  }\r\n\r\n  setSliderMarks = () => {\r\n\r\n    let sliderMarks = [\r\n      { value: 0, label: <b>Today</b> },\r\n      { value: 1, label: 'Tomorrow' }\r\n    ];\r\n    \r\n    let millisToDay = 1000 * 60 * 60 * 24;\r\n    for (let i = 2; i < this.state.sliderRange; i++) {\r\n      let date = new Date(Date.now() + millisToDay * i);\r\n      sliderMarks.push({\r\n        value: i,\r\n        label: formatDateAsString(date)\r\n      });\r\n    }\r\n\r\n    this.setState({ sliderMarks: sliderMarks });\r\n  }\r\n\r\n  updateInfoPanel = (tumbleweedIndex, predictionIndex) => {\r\n    this.setState({\r\n      selectedTumbleweedData: {\r\n        tumbleweedIndex: tumbleweedIndex,\r\n        predictionIndex: predictionIndex\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setSliderMarks();\r\n    this.getData(data => {\r\n      this.setState({ tumbleweedData: data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='map__wrapper'>\r\n          <OLMap\r\n            data={this.state.tumbleweedData}\r\n            day={this.state.day}\r\n            sliderRange={this.state.sliderRange}\r\n            updateInfoPanelFunc={this.updateInfoPanel}\r\n          />\r\n        </div>\r\n        <Container className='info'>\r\n          <Info\r\n            data={this.getSelectedTumbleweedData()}\r\n            predictionIndex={this.state.selectedTumbleweedData.predictionIndex}\r\n          />\r\n        </Container>\r\n        <div className='timeline'>\r\n          <h4 style={{ marginTop: 0 }}>Movement predictions (USA only)</h4>\r\n          <Slider\r\n            className='timeline__slider'\r\n            onChange={this.onTimelineChange}\r\n            min={0}\r\n            max={this.state.sliderRange - 1}\r\n            marks={this.state.sliderMarks}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}