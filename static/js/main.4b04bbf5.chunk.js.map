{"version":3,"sources":["images/logo/text_white.svg","util/funcs.js","OLMap.js","Info.js","Timeline.js","AppBar.js","Notification.js","App.js","index.js"],"names":["module","exports","formatDateAsString","date","dateInfo","toDateString","split","formatAsCoordinate","latitude","longitude","decimals","dir1","dir2","toFixed","OLMap","props","initWithData","data","tumbleweedLayers","tumbleweedTrailLayers","i","sliderRange","push","setTumbleweedLayer","setTumbleweedTrailLayer","currentTumbleweedLayer","currentTumbleweedTrailLayer","initMap","deleteTumbleweed","index","layer","feature","getSource","getFeatureById","removeFeature","currentTumbleweedStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","pastTumbleweedStyle","features","map","point","id","style","location","_latitude","_longitude","predictedLocations","length","n","Feature","geometry","Point","fromLonLat","setId","setStyle","VectorLayer","source","VectorSource","set","trailStyle","j","forEach","lat1","lon1","lat2","lon2","LineString","mapLayer","TileLayer","className","BingMaps","key","imagerySet","popupOverlay","Overlay","element","popupRef","current","positioning","stopEvent","offset","Map","layers","overlays","target","mapRef","view","View","center","zoom","minZoom","maxZoom","on","e","deselectTumbleweed","forEachFeatureAtPixel","pixel","get","selectTumbleweed","getTarget","cursor","String","getId","splice","tumbleweedId","predictedLocationId","undefined","updateSelectedTumbleweedDataFunc","showPopup","hidePopup","coordRaw","getGeometry","getCoordinates","coordLonLat","transform","innerHTML","display","setPosition","refreshPopup","selectedTumbleweedIndex","getFeatures","showTumbleweedLayer","callback","removeLayer","addLayer","React","createRef","prevProps","prevState","this","day","deleteTumbleweedFlag","ref","Component","Info","render","predictionIndex","Typography","component","align","currentLocation","Math","min","dangerouslySetInnerHTML","__html","Divider","Date","uploadTime","toLocaleDateString","toLocaleTimeString","uploadLocation","Card","variant","paddingBottom","marginBottom","CardActionArea","onClick","alert","src","alt","Button","startIcon","disableElevation","removeTumbleweedFunc","Timeline","state","sliderMarks","setSliderMarks","value","label","now","setState","Slider","onChange","onTimelineChangeFunc","max","marks","CustomAppBar","AppBar","position","Toolbar","paddingLeft","flexGrow","textAlign","logo_textWhite","height","paddingTop","imageRendering","draggable","disabled","refreshPredictionsDisabled","refreshTumbleweedDataFunc","Notification","Paper","severity","elevation","Container","maxWidth","padding","title","body","IconButton","closeFunc","_id","App","tumbleweedData","selectedTumbleweedData","tumbleweedIndex","refreshTumbleweedDataSnackbarIsOpen","removeTumbleweedDialogIsOpen","notifications","refreshTumbleweedData","formData","FormData","append","axios","method","url","headers","then","addNotification","catch","err","console","log","closeRefreshTumbleweedDataSnackbar","getData","cb","res","status","result","getSelectedTumbleweedData","onTimelineChange","val","updateSelectedTumbleweedData","openDialog","handleDialogClose","response","removeTumbleweed","initData","duration","newNotificationId","random","obj","setTimeout","removeNotification","filter","Dialog","open","DialogTitle","DialogContent","gutterBottom","DialogActions","autoFocus","theme","createMuiTheme","palette","primary","main","brown","ReactDOM","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.4b04bbf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/text_white.a7cace2a.svg\";","const formatDateAsString = (date) => {\r\n  let dateInfo = date.toDateString().split(' ');\r\n  return dateInfo[0] + ' ' + dateInfo[2];  // Take day and date.\r\n}\r\n\r\nconst formatAsCoordinate = (latitude, longitude, decimals = 5) => {\r\n  let dir1 = latitude < 0 ? 'S' : 'N';\r\n  let dir2 = longitude < 0 ? 'W' : 'E';\r\n  return `${latitude.toFixed(decimals)}&#xb0;${dir1}, ${longitude.toFixed(decimals)}&#xb0;${dir2}`;\r\n}\r\n\r\nexport { formatDateAsString, formatAsCoordinate };\r\n","import React from 'react';\r\n\r\nimport { Map, Feature, View, Overlay } from 'ol';\r\nimport { fromLonLat, transform } from 'ol/proj';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource, BingMaps } from 'ol/source';\r\nimport { Circle, Fill, Stroke, Style } from 'ol/style';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nimport 'ol/ol.css';\r\n\r\nclass OLMap extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = null;\r\n    this.popupOverlay = null;\r\n    this.tumbleweedLayers = null;\r\n    this.tumbleweedTrailLayers = null;\r\n    this.currentTumbleweedLayer = null;\r\n    this.currentTumbleweedLayer = null;\r\n    this.mapRef = React.createRef();\r\n    this.popupRef = React.createRef();\r\n  }\r\n\r\n  initWithData = (data) => {\r\n    this.tumbleweedLayers = [];\r\n    this.tumbleweedTrailLayers = [];\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      this.tumbleweedLayers.push(this.setTumbleweedLayer(data, i - 1));\r\n      this.tumbleweedTrailLayers.push(this.setTumbleweedTrailLayer(data, i - 1));\r\n    }\r\n    this.currentTumbleweedLayer = this.tumbleweedLayers[0]\r\n    this.currentTumbleweedTrailLayer = this.tumbleweedTrailLayers[0]\r\n    this.initMap();\r\n  }\r\n\r\n  deleteTumbleweed = (index) => {\r\n    // Remove \"current\" tumbleweed.\r\n    let layer = this.tumbleweedLayers[0];\r\n    let feature = layer.getSource().getFeatureById(`tumbleweed_${index}`);\r\n    if (feature) {\r\n      layer.getSource().removeFeature(feature);\r\n    }\r\n    // Remove predicted tumbleweeds.\r\n    for (let i = 1; i < this.props.sliderRange; i++) {\r\n      let layer = this.tumbleweedLayers[i];\r\n      let feature = layer.getSource().getFeatureById(`tumbleweed_${index}_${i - 1}`);\r\n      if (feature) {\r\n        layer.getSource().removeFeature(feature);\r\n      }\r\n    }\r\n    // Remove trails.\r\n    for (let i = 0; i < this.props.sliderRange; i++) {\r\n      let layer = this.tumbleweedTrailLayers[i];\r\n      let feature = layer.getSource().getFeatureById(`tumbleweedTrail_${index}`);\r\n      if (feature) {\r\n        layer.getSource().removeFeature(feature);\r\n      }\r\n    }\r\n  }\r\n\r\n  setTumbleweedLayer = (data, index) => {\r\n\r\n    let currentTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e3af2b' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    let pastTumbleweedStyle = new Style({\r\n      image: new Circle({\r\n        radius: 8,\r\n        fill: new Fill({ color: '#e2cf9e' }),\r\n        stroke: new Stroke({ color: '#664e13', width: 2 })\r\n      })\r\n    });\r\n\r\n    // Draw tumbleweeds.\r\n\r\n    let features = data.map((point, i) => {\r\n\r\n      let style = currentTumbleweedStyle;\r\n\r\n      let id, longitude, latitude;\r\n      \r\n      if (index === -1) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._latitude;\r\n        longitude = point.location._longitude;\r\n      }\r\n      else if (point.predictedLocations.length === 0) {\r\n        id = `tumbleweed_${i}`;\r\n        latitude = point.location._latitude;\r\n        longitude = point.location._longitude;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n      else if (index < point.predictedLocations.length) {\r\n        id = `tumbleweed_${i}_${index}`;\r\n        latitude = point.predictedLocations[index]._latitude;\r\n        longitude = point.predictedLocations[index]._longitude;\r\n      }\r\n      else {\r\n        let n = point.predictedLocations.length - 1;\r\n        id = `tumbleweed_${i}_${n}`;\r\n        latitude = point.predictedLocations[n]._latitude;\r\n        longitude = point.predictedLocations[n]._longitude;\r\n        style = pastTumbleweedStyle;\r\n      }\r\n\r\n      let feature = new Feature({\r\n        geometry: new Point(fromLonLat([\r\n          longitude, latitude\r\n        ]))\r\n      });\r\n      feature.setId(id);\r\n      feature.setStyle(style);\r\n      return feature;\r\n    });\r\n\r\n    let layer = new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n    layer.set('name', 'tumbleweeds');\r\n    return layer;\r\n  }\r\n\r\n  setTumbleweedTrailLayer = (data, index) => {\r\n\r\n    let trailStyle = new Style({\r\n      stroke: new Stroke({ color: '#664e13', width: 4 })\r\n    });\r\n\r\n    // Draw trail.\r\n\r\n    let features = [];\r\n\r\n    if (index !== -1) {\r\n      // Loop day by day.\r\n      for (let j = 0; j <= index; j++){\r\n        // Loop through tumbleweeds.\r\n        data.forEach((point, i) => {\r\n          // Only draw prediction lines if predictions extend far enough.\r\n          if (j < point.predictedLocations.length) {\r\n            let lat1 = j === 0 ? point.location._latitude : point.predictedLocations[j - 1]._latitude;\r\n            let lon1 = j === 0 ? point.location._longitude : point.predictedLocations[j - 1]._longitude;\r\n            let lat2 = point.predictedLocations[j]._latitude;\r\n            let lon2 = point.predictedLocations[j]._longitude;\r\n\r\n            let feature = new Feature({\r\n              geometry: new LineString([\r\n                fromLonLat([ lon1, lat1 ]),\r\n                fromLonLat([ lon2, lat2 ])\r\n              ])\r\n            });\r\n            feature.setId(`tumbleweedTrail_${i}`)\r\n            feature.setStyle(trailStyle);\r\n            features.push(feature);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    let layer = new VectorLayer({\r\n      source: new VectorSource({ features: features })\r\n    });\r\n    layer.set('name', 'tumbleweedTrails');\r\n    return layer;\r\n  }\r\n\r\n  initMap = () => {\r\n\r\n    let mapLayer = new TileLayer({\r\n      className: 'map__bingMaps',\r\n      source: new BingMaps({\r\n        key: 'AtMr0RAC0iKdKPPPsGSPqIFCxjk7XpR9rq99IQR5vDBoax8u1KuYvOinwtsiQcFI',\r\n        imagerySet: 'AerialWithLabelsOnDemand'\r\n      })\r\n    });\r\n\r\n    this.popupOverlay = new Overlay({\r\n      element: this.popupRef.current,\r\n      positioning: 'bottom-center',\r\n      stopEvent: false,\r\n      offset: [ 0, -16 ]\r\n    });\r\n    \r\n    this.map = new Map({\r\n      layers: [ mapLayer, this.currentTumbleweedTrailLayer, this.currentTumbleweedLayer ],\r\n      overlays: [ this.popupOverlay ],\r\n      target: this.mapRef.current,\r\n      view: new View({\r\n        center: fromLonLat([ -97, 42 ]),\r\n        zoom: 5,\r\n        minZoom: 5,\r\n        maxZoom: 15\r\n      })\r\n    });\r\n\r\n    this.map.on('click', e => {\r\n      // Default to no selection.\r\n      this.deselectTumbleweed();\r\n      // Select if applicable.\r\n      this.map.forEachFeatureAtPixel(e.pixel, (feature, layer) => {\r\n        if (layer.get('name') === 'tumbleweeds') {\r\n          this.selectTumbleweed(feature);\r\n          return true;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.map.on('pointermove', e => {\r\n      // Default to no selection.\r\n      this.map.getTarget().style.cursor = '';\r\n      // Select if applicable.\r\n      this.map.forEachFeatureAtPixel(e.pixel, (feature, layer) => {\r\n        if (layer.get('name') === 'tumbleweeds') {\r\n          this.map.getTarget().style.cursor = 'pointer';\r\n          return true;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  selectTumbleweed = (feature) => {\r\n    let [ tumbleweedId, predictedLocationId ] = String(feature.getId()).split('_').splice(1);  // Ignore the first element.\r\n    if (predictedLocationId !== undefined) {\r\n      this.props.updateSelectedTumbleweedDataFunc(tumbleweedId, predictedLocationId);\r\n    }\r\n    else {\r\n      this.props.updateSelectedTumbleweedDataFunc(tumbleweedId, -1);\r\n    }\r\n    this.showPopup(feature);\r\n  }\r\n\r\n  deselectTumbleweed = () => {\r\n    this.props.updateSelectedTumbleweedDataFunc(-1, -1);\r\n    this.hidePopup();\r\n  }\r\n\r\n  showPopup = (feature) => {\r\n    let coordRaw = feature.getGeometry().getCoordinates();\r\n    let coordLonLat = transform(coordRaw, 'EPSG:3857', 'EPSG:4326');\r\n    \r\n    this.popupRef.current.innerHTML = formatAsCoordinate(coordLonLat[1], coordLonLat[0], 3);\r\n    this.popupRef.current.style.display = 'block';\r\n    this.popupOverlay.setPosition(coordRaw);\r\n  }\r\n\r\n  hidePopup = () => {\r\n    this.popupRef.current.style.display = 'none';\r\n  }\r\n\r\n  refreshPopup = () => {\r\n    if (this.props.selectedTumbleweedIndex !== -1) {\r\n      let features = this.currentTumbleweedLayer.getSource().getFeatures();\r\n      this.showPopup(features[this.props.selectedTumbleweedIndex]);\r\n    }\r\n  }\r\n\r\n  showTumbleweedLayer = (index, callback = (() => {})) => {\r\n    this.map.removeLayer(this.currentTumbleweedTrailLayer);\r\n    this.map.removeLayer(this.currentTumbleweedLayer);\r\n    this.map.addLayer(this.tumbleweedTrailLayers[index]);\r\n    this.map.addLayer(this.tumbleweedLayers[index]);\r\n    this.currentTumbleweedLayer = this.tumbleweedLayers[index];\r\n    this.currentTumbleweedTrailLayer = this.tumbleweedTrailLayers[index];\r\n    callback();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.data !== this.props.data) {\r\n      this.initWithData(this.props.data);\r\n    }\r\n    if (prevProps.day !== this.props.day) {\r\n      this.showTumbleweedLayer(this.props.day, () => {\r\n        this.refreshPopup();\r\n      });\r\n    }\r\n    if (prevProps.deleteTumbleweedFlag !== this.props.deleteTumbleweedFlag) {\r\n      this.deselectTumbleweed();\r\n      this.deleteTumbleweed(this.props.selectedTumbleweedIndex);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.mapRef} className='map'>\r\n        <div ref={this.popupRef} className='map__popup' style={{display: 'none'}} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default OLMap;\r\n","import React from 'react';\r\nimport { Typography, Divider, Card, CardActionArea, Button } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport { formatAsCoordinate } from './util/funcs';\r\n\r\nclass Info extends React.Component {\r\n\r\n  render = ()  => {\r\n\r\n    let { data, predictionIndex } = this.props;\r\n\r\n    if (!data) {\r\n      return (\r\n        <Typography component='div' align='center'>\r\n          <h4>No tumbleweed selected.</h4>\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    let currentLocation = data.location;\r\n    if (data.predictedLocations.length > 0) {\r\n      if (predictionIndex !== -1) {\r\n        let index = Math.min(predictionIndex, data.predictedLocations.length - 1);\r\n        currentLocation = data.predictedLocations[index];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Typography component='div' align='center'>\r\n        <h4>Current position (est.)</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(currentLocation._latitude, currentLocation._longitude)\r\n        }} />\r\n        <Divider />\r\n        <h4>Initial sighting time</h4>\r\n        <p>\r\n          {(new Date(data.uploadTime)).toLocaleDateString()}\r\n          <br />\r\n          {(new Date(data.uploadTime)).toLocaleTimeString()}\r\n        </p>\r\n        <h4>Initial sighting position</h4>\r\n        <p dangerouslySetInnerHTML={{\r\n          __html: formatAsCoordinate(data.uploadLocation._latitude, data.uploadLocation._longitude)\r\n        }} />\r\n        <h4>Initial sighting image</h4>\r\n        <Card className='aspect-ratio' variant='outlined' style={{paddingBottom: '75%', marginBottom: '1em'}}>\r\n          <div>\r\n            <CardActionArea onClick={() => alert('test')}>\r\n            <img src='https://picsum.photos/400' alt='Initial sighting' />\r\n            </CardActionArea>\r\n          </div>\r\n        </Card>\r\n        <Button\r\n            startIcon={<DeleteIcon />}\r\n            variant='contained'\r\n            color='primary'\r\n            disableElevation\r\n            onClick={this.props.removeTumbleweedFunc}\r\n          >\r\n            Remove this tumbleweed\r\n          </Button>\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport { Typography, Slider } from '@material-ui/core';\r\n\r\nimport { formatDateAsString } from './util/funcs';\r\n\r\nclass Timeline extends React.Component {\r\n\r\n  state = {\r\n    sliderMarks: []\r\n  }\r\n\r\n  setSliderMarks = () => {\r\n\r\n    let sliderMarks = [\r\n      { value: 0, label: <b>Today</b> },\r\n      { value: 1, label: 'Tomorrow' }\r\n    ];\r\n    \r\n    let millisToDay = 1000 * 60 * 60 * 24;\r\n    for (let i = 2; i < this.props.sliderRange; i++) {\r\n      let date = new Date(Date.now() + millisToDay * i);\r\n      sliderMarks.push({\r\n        value: i,\r\n        label: formatDateAsString(date)\r\n      });\r\n    }\r\n\r\n    this.setState({ sliderMarks: sliderMarks });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setSliderMarks();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Typography component='div' align='center'>\r\n        <h4>Movement predictions (USA only)</h4>\r\n        <p>\r\n          <Slider\r\n            className='timeline__slider'\r\n            onChange={this.props.onTimelineChangeFunc}\r\n            min={0}\r\n            max={this.props.sliderRange - 1}\r\n            marks={this.state.sliderMarks}\r\n          />\r\n        </p>\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport logo_textWhite from './images/logo/text_white.svg';\r\n\r\nclass CustomAppBar extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <AppBar position='static'>\r\n        <Toolbar style={{paddingLeft: 0}}>  {/* No padding left to accomodate logo positioning. */}\r\n          <Typography variant='h5' style={{flexGrow: 1}}>\r\n            <div style={{ width: 400, textAlign: 'center' }}>\r\n              <img src={logo_textWhite} style={{height: '1.2em', paddingTop: '0.2em', imageRendering: 'crisp-edges'}} draggable={false} alt='Logo' />\r\n            </div>\r\n          </Typography>\r\n          <Button\r\n            startIcon={<RefreshIcon />}\r\n            variant='contained'\r\n            color='primary'\r\n            disableElevation\r\n            disabled={this.props.refreshPredictionsDisabled}\r\n            onClick={this.props.refreshTumbleweedDataFunc}\r\n          >\r\n            Reset Predictions\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomAppBar;\r\n","import React from 'react';\r\nimport { Container, Paper, Typography, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport './Notification.css';\r\n\r\nclass Notification extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <Paper className={'notification ' + this.props.severity} elevation={3}>\r\n        <Container className='container' maxWidth='xs'>\r\n          <Typography component='div' style={{ padding: '0 1em' }}>\r\n            <h4>{this.props.title}</h4>\r\n            <p>{this.props.body}</p>\r\n          </Typography>\r\n          <IconButton className='closeIcon' onClick={() => this.props.closeFunc(this.props._id)}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Container>\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Button, Typography } from '@material-ui/core';\r\nimport OLMap from './OLMap';\r\nimport Info from './Info';\r\nimport Timeline from './Timeline';\r\nimport AppBar from './AppBar';\r\nimport Notification from './Notification';\r\n\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    day: 0,\r\n    sliderMarks: [],\r\n    sliderRange: 8,  // 7 days in advance\r\n    tumbleweedData: [],\r\n    selectedTumbleweedData: {\r\n      tumbleweedIndex: -1,\r\n      predictionIndex: -1\r\n    },\r\n    refreshPredictionsDisabled: false,\r\n    refreshTumbleweedDataSnackbarIsOpen: false,\r\n    removeTumbleweedDialogIsOpen: false,\r\n    notifications: [],\r\n    deleteTumbleweedFlag: 0\r\n  };\r\n\r\n  refreshTumbleweedData = () => {\r\n\r\n    this.setState({\r\n      refreshPredictionsDisabled: true,\r\n      refreshTumbleweedDataSnackbarIsOpen: false\r\n    });\r\n    \r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/update';\r\n    let formData = new FormData();\r\n    formData.append('forced', 'true');\r\n    axios({\r\n      method: 'post',\r\n      url: url,\r\n      data: formData,\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    }).then(() => {\r\n      this.setState({\r\n        refreshPredictionsDisabled: false,\r\n        refreshTumbleweedDataSnackbarIsOpen: true\r\n      });\r\n      this.addNotification(null, 'Tumbleweed movement predictions reset! Refresh the page to see the updates.', 'info', 0);\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  closeRefreshTumbleweedDataSnackbar = () => {\r\n    this.setState({ refreshTumbleweedDataSnackbarIsOpen: false });\r\n  }\r\n\r\n  getData = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/get';\r\n    axios.get(url).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.data.result);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n    });\r\n  }\r\n\r\n  getSelectedTumbleweedData = () => {\r\n    let index = this.state.selectedTumbleweedData.tumbleweedIndex;\r\n    return index === -1 ? null : this.state.tumbleweedData[index];\r\n  }\r\n\r\n  onTimelineChange = (e, val) => {\r\n    this.setState({ day: val });\r\n    this.updateSelectedTumbleweedData(this.state.selectedTumbleweedData.tumbleweedIndex, val - 1);\r\n  }\r\n\r\n  updateSelectedTumbleweedData = (tumbleweedIndex, predictionIndex) => {\r\n    this.setState({\r\n      selectedTumbleweedData: {\r\n        tumbleweedIndex: tumbleweedIndex,\r\n        predictionIndex: predictionIndex\r\n      }\r\n    });\r\n  }\r\n\r\n  openDialog = () => this.setState({ removeTumbleweedDialogIsOpen: true });\r\n\r\n  handleDialogClose = (response) => {\r\n    this.setState({ removeTumbleweedDialogIsOpen: false });\r\n    if (response) {\r\n      this.removeTumbleweed((status) => {\r\n        if (status === 200) {\r\n          this.addNotification('Success', 'Tumbleweed has been removed.', 'success', 5000);\r\n          this.setState({ deleteTumbleweedFlag: Date.now() });\r\n        }\r\n        else {\r\n          this.addNotification('Error', 'There was an error removing the tumbleweed.', 'error', 5000);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  removeTumbleweed = (cb) => {\r\n    let url = 'https://tumbleweed-go-284013.ue.r.appspot.com/tumbleweed/delete';\r\n    let tumbleweedIndex = this.state.selectedTumbleweedData.tumbleweedIndex;\r\n    let formData = new FormData();\r\n    formData.append('id', this.state.tumbleweedData[tumbleweedIndex]._id);\r\n    axios({\r\n      method: 'post',\r\n      url: url,\r\n      data: formData,\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    }).then(res => {\r\n      if (res.status && res.status === 200) {\r\n        cb(res.status);\r\n      }\r\n      else {\r\n        console.log('rip ' + res.status);\r\n        cb(res.status);\r\n      }\r\n    }).catch(err => {\r\n      console.log('big rip ' + err);\r\n      cb(500);\r\n    });\r\n  }\r\n\r\n  initData = () => {\r\n    this.getData(data => {\r\n      this.setState({ tumbleweedData: data });\r\n    });\r\n  }\r\n\r\n  addNotification = (title, body, severity, duration) => {\r\n\r\n    let newNotificationId = `${Date.now()}_${Math.random()}`\r\n    let obj = {\r\n      id: newNotificationId,\r\n      title: title,\r\n      body: body,\r\n      severity: severity\r\n    };\r\n\r\n    if (duration !== 0) {\r\n      setTimeout(() => {\r\n        this.removeNotification(newNotificationId);\r\n      }, duration);\r\n    }\r\n\r\n    this.setState(state => ({\r\n      notifications: [ ...state.notifications, obj ]\r\n    }));\r\n  }\r\n\r\n  removeNotification = (id) => {\r\n    this.setState(state => ({\r\n      notifications: state.notifications.filter(n => n.id !== id)\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className='appContainer'>\r\n          <div className='map__wrapper'>\r\n            <OLMap\r\n              data={this.state.tumbleweedData}\r\n              day={this.state.day}\r\n              sliderRange={this.state.sliderRange}\r\n              selectedTumbleweedIndex={this.state.selectedTumbleweedData.tumbleweedIndex}\r\n              deleteTumbleweedFlag={this.state.deleteTumbleweedFlag}\r\n              updateSelectedTumbleweedDataFunc={this.updateSelectedTumbleweedData}\r\n            />\r\n          </div>\r\n          <Container maxWidth={false} className='info'>\r\n            <Info\r\n              data={this.getSelectedTumbleweedData()}\r\n              predictionIndex={this.state.selectedTumbleweedData.predictionIndex}\r\n              removeTumbleweedFunc={this.openDialog}\r\n            />\r\n          </Container>\r\n          <Container maxWidth={false} className='timeline'>\r\n            <Timeline\r\n              sliderRange={this.state.sliderRange}\r\n              onTimelineChangeFunc={this.onTimelineChange}\r\n            />\r\n          </Container>\r\n          <div className='topBar'>\r\n            <AppBar\r\n              refreshPredictionsDisabled={this.state.refreshPredictionsDisabled}\r\n              refreshTumbleweedDataFunc={this.refreshTumbleweedData}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <Dialog maxWidth='sm' open={this.state.removeTumbleweedDialogIsOpen}>\r\n          <DialogTitle>Confirm</DialogTitle>\r\n          <DialogContent>\r\n            <Typography gutterBottom>\r\n              Are you sure you would like to remove this tumbleweed?\r\n            </Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={() => this.handleDialogClose(false)} color='primary'>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => this.handleDialogClose(true)} color='primary'>\r\n              Confirm\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <div id='notification-container'>\r\n          {\r\n            this.state.notifications.map(n => {\r\n              return <Notification\r\n                key={n.id}\r\n                _id={n.id}\r\n                title={n.title}\r\n                body={n.body}\r\n                severity={n.severity}\r\n                closeFunc={this.removeNotification}\r\n              />\r\n            })\r\n          }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { brown } from '@material-ui/core/colors';\r\nimport App from './App';\r\n\r\nimport './index.css';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: brown[500],\r\n    },\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}